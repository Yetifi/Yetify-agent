version: '3.8'

services:
  # Yetify Backend API
  yetify-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: yetify-backend
    ports:
      - "${PORT:-3001}:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3001
      - MONGODB_URI=mongodb://yetify-mongodb:27017/yetify
      - REDIS_URL=redis://yetify-redis:6379
      - JWT_SECRET=${JWT_SECRET:-change_this_in_production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-change_this_32_char_key_production}
      # AI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - PINECONE_INDEX=${PINECONE_INDEX:-yetify-strategies}
      # Blockchain Configuration
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - NEAR_NODE_URL=${NEAR_NODE_URL:-https://rpc.testnet.near.org}
      - ARBITRUM_RPC_URL=${ARBITRUM_RPC_URL}
      # External APIs
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY}
    depends_on:
      yetify-mongodb:
        condition: service_healthy
      yetify-redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - backend-data:/app/data
    networks:
      - yetify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # MongoDB Database
  yetify-mongodb:
    image: mongo:7.0
    container_name: yetify-mongodb
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    environment:
      - MONGO_INITDB_DATABASE=yetify
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD:-yetify_admin_password}
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - yetify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis Cache
  yetify-redis:
    image: redis:7.2-alpine
    container_name: yetify-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-yetify_redis_password}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - yetify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy
  yetify-nginx:
    image: nginx:alpine
    container_name: yetify-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - yetify-backend
    networks:
      - yetify-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Prometheus Metrics
  yetify-prometheus:
    image: prom/prometheus:latest
    container_name: yetify-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - yetify-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Grafana Dashboard
  yetify-grafana:
    image: grafana/grafana:latest
    container_name: yetify-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-yetify_grafana_password}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - yetify-prometheus
    networks:
      - yetify-network
    restart: unless-stopped
    user: "472"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Log aggregation (optional)
  yetify-loki:
    image: grafana/loki:latest
    container_name: yetify-loki
    ports:
      - "${LOKI_PORT:-3100}:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
    networks:
      - yetify-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

# Named volumes for persistent data
volumes:
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  backend-data:
    driver: local

# Custom network for service communication
networks:
  yetify-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    attachable: true
